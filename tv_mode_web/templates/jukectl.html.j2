<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Jukebox Control</title>
    <style>
        body {
            font-family: "Arial", sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #121212;
            color: #fff;
        }

        .container {
            max-width: 700px;
            margin: 0 auto;
            padding: 20px;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
        }

        h1 {
            margin: 0;
            font-size: 2rem;
        }

        .nav-link {
            background-color: #666;
            color: white;
            padding: 10px 20px;
            text-decoration: none;
            border-radius: 6px;
            font-weight: bold;
        }

        .nav-link:hover {
            background-color: #555;
        }

        .status-card {
            background-color: #1e1e1e;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 25px;
        }

        .status-card h2 {
            margin-top: 0;
            color: #fff;
            font-size: 1.3rem;
        }

        .status-row {
            margin: 12px 0;
            font-size: 18px;
        }

        .status-label {
            display: inline-block;
            font-weight: bold;
            color: #bbb;
            width: 110px;
        }

        .status-value {
            color: #d0ffd0;
            font-weight: 500;
        }

        .status-subvalue {
            display: block;
            margin-left: 110px;
            color: #aaa;
            font-size: 16px;
        }

        .tag-list {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 5px;
        }

        .tag {
            background-color: #4CAF50;
            padding: 6px 14px;
            border-radius: 5px;
            font-size: 15px;
        }

        .tag.not-tag {
            background-color: #F44336;
        }

        .controls {
            display: grid;
            gap: 20px;
            margin-top: 25px;
        }

        .btn {
            padding: 20px;
            font-size: 22px;
            border: none;
            border-radius: 10px;
            cursor: pointer;
            font-weight: bold;
            transition: 0.2s;
        }

        .btn-skip {
            background-color: #d17b00;
            color: #fff;
        }

        .btn-skip:hover, .btn-skip:active {
            background-color: #b96700;
        }

        .channel-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));
            gap: 12px;
        }

        .btn-channel {
            background-color: #9C27B0;
            color: white;
            padding: 15px;
            font-size: 16px;
            border-radius: 8px;
        }

        .btn-channel:hover, .btn-channel:active {
            background-color: #7B1FA2;
        }

        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }

        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #fff;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 25px;
            border-radius: 6px;
            color: white;
            font-weight: bold;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 100;
            max-width: 80%;
            text-align: center;
        }

        .notification.show {
            opacity: 1;
        }

        .success { background-color: #4CAF50; }
        .error { background-color: #F44336; }

        @media (max-width: 600px) {
            .btn { font-size: 20px; padding: 25px; }
            .status-label { width: 90px; }
        }
    </style>
</head>
<body>
<div class="container">
    <div class="header">
        <h1>Jukebox Control</h1>
        <a href="/" class="nav-link">TV Mode</a>
    </div>

    <!-- Now Playing Section -->
    <div class="status-card">
        <h2>Now Playing</h2>
        <div class="status-row">
            <span class="status-label">Artist:</span>
            <span class="status-value" id="artist">Loading...</span>
        </div>
        <div class="status-row">
            <span class="status-label">Album:</span>
            <span class="status-value" id="album">Loading...</span>
        </div>
        <div class="status-row">
            <span class="status-label">Song:</span>
            <span class="status-value" id="song">Loading...</span>
        </div>
    </div>

    <!-- Up Next Section -->
    <div class="status-card">
        <h2>Up Next</h2>
        <div class="status-row">
            <span class="status-label">Artist:</span>
            <span class="status-value" id="next-artist">-</span>
        </div>
        <div class="status-row">
            <span class="status-label">Album:</span>
            <span class="status-value" id="next-album">-</span>
        </div>
        <div class="status-row">
            <span class="status-label">Song:</span>
            <span class="status-value" id="next-song">-</span>
        </div>
    </div>

    <!-- Tags -->
    <div class="status-card">
        <h2>Active Filters</h2>
        <div class="status-row">
            <span class="status-label">Playing Tags:</span>
            <div class="tag-list" id="any-tags"><span>Loading...</span></div>
        </div>
        <div class="status-row">
            <span class="status-label">Excluding:</span>
            <div class="tag-list" id="not-tags"><span>None</span></div>
        </div>
    </div>

    <!-- Controls -->
    <div class="controls">
        <button id="skip-btn" class="btn btn-skip">SKIP SONG</button>
    </div>

    <!-- Channel Presets -->
    {% if channels|length > 0 %}
    <div class="status-card">
        <h2>Channel Presets</h2>
        <div class="channel-buttons" id="channel-buttons">
            {% for channel in channels %}
            <button class="btn btn-channel" data-channel='{{ channel|tojson }}'>
                {{ channel.name }}
            </button>
            {% endfor %}
        </div>
    </div>
    {% endif %}

    <!-- Queue -->
    <div class="status-card">
        <h2>Upcoming Queue</h2>
        <div id="queue-list" style="font-family: monospace; white-space: pre-wrap; font-size: 14px; color: #ddd;">
            Loading...
        </div>
    </div>
</div>

<div class="loading" id="loading">
    <div class="spinner"></div>
    <p>Processing...</p>
</div>

<div id="notification" class="notification"></div>

<script>
    const API_BASE_URL = '/jukectl/proxy';

    function parseSongPath(path) {
        if (!path) return { artist: '-', album: '-', song: '-' };
        const parts = path.split('/');
        return {
            artist: parts[0] || '-',
            album: parts[1] || '-',
            song: parts.slice(2).join('/') || '-'
        };
    }

    async function updateNowPlaying() {
        try {
            const response = await fetch(`${API_BASE_URL}/`);
            const data = await response.json();

            const now = parseSongPath(data[0]);
            document.getElementById('artist').textContent = now.artist;
            document.getElementById('album').textContent = now.album;
            document.getElementById('song').textContent = now.song;

            if (data[1]) {
                const next = parseSongPath(data[1]);
                document.getElementById('next-artist').textContent = next.artist;
                document.getElementById('next-album').textContent = next.album;
                document.getElementById('next-song').textContent = next.song;
            } else {
                document.getElementById('next-artist').textContent = '-';
                document.getElementById('next-album').textContent = '-';
                document.getElementById('next-song').textContent = '-';
            }
        } catch {
            showNotification('Failed to load now playing', 'error');
        }
    }

    async function updateTags() {
        try {
            const res = await fetch(`${API_BASE_URL}/tags`);
            const data = await res.json();

            const anyEl = document.getElementById('any-tags');
            const notEl = document.getElementById('not-tags');

            anyEl.innerHTML = data.any?.length
                ? data.any.map(t => `<span class="tag">${t}</span>`).join('')
                : '<span>None</span>';

            notEl.innerHTML = data.not?.length
                ? data.not.map(t => `<span class="tag not-tag">${t}</span>`).join('')
                : '<span>None</span>';
        } catch {
            showNotification('Tag data unavailable', 'error');
        }
    }

    async function updateQueue() {
        try {
            const res = await fetch(`${API_BASE_URL}/queue`);
            const data = await res.json();
            const el = document.getElementById('queue-list');

            if (data.head) {
                el.textContent = `Queue length: ${data.length}\n` +
                    data.head.slice(0, 10).map((s, i) => `${i + 1}. ${s}`).join("\n");
            } else {
                el.textContent = 'No queue data available';
            }
        } catch {
            document.getElementById('queue-list').textContent = 'Queue unavailable';
        }
    }

    async function skipSong() {
        showLoading(true);
        const prevSong = document.getElementById('song').textContent;

        try {
            const res = await fetch(`${API_BASE_URL}/skip`, { method: 'POST' });
            if (!res.ok) throw new Error("Skip failed");

            showNotification('Skipping...', 'success');

            // Try refreshing every 500ms until song changes or timeout
            let attempts = 0;
            const maxAttempts = 20; // 10 seconds
            let changed = false;

            while (attempts < maxAttempts && !changed) {
                await new Promise(r => setTimeout(r, 500));
                await updateNowPlaying();
                const currentSong = document.getElementById('song').textContent;
                if (currentSong !== prevSong && currentSong !== 'Loading...') {
                    changed = true;
                }
                attempts++;
            }

            if (changed) {
                showNotification('Song skipped!', 'success');
            } else {
                showNotification('Skip complete (delayed update)', 'success');
            }

            updateQueue();
            updateTags();

        } catch (err) {
            console.error(err);
            showNotification('Failed to skip song', 'error');
        } finally {
            showLoading(false);
        }
    }

    function showLoading(show) {
        document.getElementById('loading').style.display = show ? 'block' : 'none';
    }

    function showNotification(msg, type) {
        const n = document.getElementById('notification');
        n.textContent = msg;
        n.className = `notification ${type} show`;
        setTimeout(() => n.classList.remove('show'), 3000);
    }

    document.getElementById('skip-btn').addEventListener('click', skipSong);

    document.querySelectorAll('.btn-channel').forEach(btn => {
        btn.addEventListener('click', async function() {
            const channel = JSON.parse(this.dataset.channel);
            showLoading(true);
            try {
                const res = await fetch(`${API_BASE_URL}/tags`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ any: channel.any, not: channel.not })
                });
                if (res.ok) showNotification(`Channel: ${channel.name}`, 'success');
            } catch {
                showNotification('Failed to apply channel', 'error');
            } finally {
                showLoading(false);
                updateTags();
            }
        });
    });

    // Initial refresh
    updateNowPlaying();
    updateTags();
    updateQueue();
    setInterval(() => {
        updateNowPlaying();
        updateTags();
        updateQueue();
    }, 10000);
</script>
</body>
</html>
