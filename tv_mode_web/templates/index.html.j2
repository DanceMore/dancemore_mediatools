<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TV Show Picker</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #121212;
            color: #fff;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            color: #fff;
        }
        .user-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }
        .control-buttons {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
            margin-top: 30px;
        }
        .btn {
            padding: 15px;
            font-size: 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s;
        }
        .user-btn {
            background-color: #4CAF50;
            color: white;
            height: auto;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        .user-btn:hover, .user-btn:active {
            background-color: #388E3C;
        }
        .user-name {
            font-size: 22px;
            font-weight: bold;
            margin-bottom: 8px;
        }
        .shows-list {
            font-size: 12px;
            opacity: 0.8;
            text-align: center;
            margin-top: 5px;
        }
        .stop-btn {
            background-color: #F44336;
            color: white;
            height: 80px;
        }
        .stop-btn:hover, .stop-btn:active {
            background-color: #D32F2F;
        }
        #status-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 20px 0;
        }
        
        #status, #tv-mode-status {
            padding: 10px;
            border-radius: 4px;
            color: white;
            font-weight: bold;
        }
        
        #tv-mode-status {
            background-color: #757575;
        }
        .status {
            background-color: #333;
            padding: 15px;
            border-radius: 8px;
            margin-top: 20px;
            text-align: center;
        }
        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #fff;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            font-weight: bold;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 100;
        }
        .success {
            background-color: #4CAF50;
        }
        .error {
            background-color: #F44336;
        }
        /* Make buttons extra big on small screens */
        @media (max-width: 600px) {
            .user-btn {
                min-height: 150px;
            }
            .user-name {
                font-size: 24px;
            }
            .shows-list {
                font-size: 14px;
            }
            .stop-btn {
                height: 100px;
                font-size: 24px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>TV Show Picker</h1>
        
        <div id="user-buttons" class="user-buttons">
            <!-- User buttons will be inserted here dynamically -->
        </div>
        
        <div id="status-container">
            <div id="status">Status: Loading...</div>
            <div id="tv-mode-status">TV Mode: Loading...</div>
        </div>
        
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>Processing...</p>
        </div>
        
        <div class="control-buttons">
            <button id="stop-btn" class="btn stop-btn">STOP PLAYBACK</button>
        </div>
    </div>
    
    <div id="notification" class="notification"></div>

    <script>
        // Store show mappings
        let showMappings = {};
        
        // Function to fetch show mappings
        async function loadShowMappings() {
            try {
                const response = await fetch('/api/users');
                const data = await response.json();
                showMappings = data.show_mappings;
                createUserButtons();
            } catch (error) {
                showNotification(`Failed to load show mappings: ${error.message}`, 'error');
            }
        }
        
        // Function to create user buttons from show mappings
        function createUserButtons() {
            const userButtonsContainer = document.getElementById('user-buttons');
            userButtonsContainer.innerHTML = '';
            
            Object.keys(showMappings).forEach(user => {
                const button = document.createElement('button');
                button.className = 'btn user-btn';
                button.addEventListener('click', () => playShowForUser(user));
                
                // Create user name element
                const userName = document.createElement('div');
                userName.className = 'user-name';
                userName.textContent = user.charAt(0).toUpperCase() + user.slice(1); // Capitalize first letter
                
                // Create shows list element
                const showsList = document.createElement('div');
                showsList.className = 'shows-list';
                showsList.textContent = showMappings[user].join(', ');
                
                button.appendChild(userName);
                button.appendChild(showsList);
                userButtonsContainer.appendChild(button);
            });
        }
        
        // Function to play a random show for a user
        async function playShowForUser(user) {
            showLoading(true);
            try {
                const response = await fetch(`/api/play/${user}`, {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (response.ok) {
                    showNotification(`Playing show for ${user}`, 'success');
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification(`Failed to play show: ${error.message}`, 'error');
            } finally {
                showLoading(false);
                updateStatus();
            }
        }
        
        // Function to stop playback
        async function stopPlayback() {
            showLoading(true);
            try {
                const response = await fetch('/api/stop', {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (response.ok) {
                    showNotification('Playback stopped', 'success');
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification(`Failed to stop playback: ${error.message}`, 'error');
            } finally {
                showLoading(false);
                updateStatus();
            }
        }
        
        // Function to update the status display
        async function updateStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                
                const statusElement = document.getElementById('status');
                
                // Update main status message
                if (data.status === 'active') {
                    statusElement.textContent = 'Status: Media is currently playing';
                    statusElement.style.backgroundColor = '#4CAF50';
                } else if (data.status === 'inactive') {
                    statusElement.textContent = 'Status: No media is currently playing';
                    statusElement.style.backgroundColor = '#333';
                } else {
                    statusElement.textContent = `Status: ${data.message}`;
                    statusElement.style.backgroundColor = '#F44336';
                }
                
                // Add TV mode status information
                const tvModeElement = document.getElementById('tv-mode-status');
                if (data.tv_mode) {
                    const tvActiveStatus = data.tv_mode.active ? 'Active' : 'Inactive';
                    let tvModeText = `TV Mode: ${tvActiveStatus}`;
                    
                    // Add user information if available
                    if (data.tv_mode.active && data.tv_mode.user) {
                        tvModeText += ` (User: ${data.tv_mode.user})`;
                    }
                    
                    tvModeElement.textContent = tvModeText;
                    tvModeElement.style.display = 'block';
                    
                    // Set visual indicator for TV mode status
                    if (data.tv_mode.active) {
                        tvModeElement.style.backgroundColor = '#2196F3'; // Blue for active TV mode
                    } else {
                        tvModeElement.style.backgroundColor = '#757575'; // Gray for inactive TV mode
                    }
                } else {
                    tvModeElement.style.display = 'none';
                }
            } catch (error) {
                const statusElement = document.getElementById('status');
                statusElement.textContent = `Status: Error - ${error.message}`;
                statusElement.style.backgroundColor = '#F44336';
                
                // Hide TV mode element on error
                const tvModeElement = document.getElementById('tv-mode-status');
                tvModeElement.style.display = 'none';
            }
        }
        
        // Function to show/hide loading indicator
        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'block' : 'none';
        }
        
        // Function to show notifications
        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.opacity = 1;
            
            setTimeout(() => {
                notification.style.opacity = 0;
            }, 3000);
        }
        
        // Setup event listeners
        document.getElementById('stop-btn').addEventListener('click', stopPlayback);
        
        // Load initial data
        loadShowMappings();
        updateStatus();
        
        // Update status periodically
        setInterval(updateStatus, 5000);
    </script>
</body>
</html>
