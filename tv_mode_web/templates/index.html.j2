<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>TV Show Picker</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #121212;
            color: #fff;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
        }
        h1 {
            text-align: center;
            margin-bottom: 30px;
            color: #fff;
        }
        .user-buttons {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 30px;
        }
        .control-buttons {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
            margin-top: 30px;
        }
        .btn {
            padding: 15px;
            font-size: 18px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            text-align: center;
            transition: all 0.3s;
        }
        .user-btn {
            background-color: #4CAF50;
            color: white;
            height: auto;
            min-height: 120px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
        }
        .user-btn:hover, .user-btn:active {
            background-color: #388E3C;
        }
        .user-name {
            font-size: 22px;
            font-weight: bold;
            margin-bottom: 8px;
        }
        .shows-list {
            font-size: 12px;
            opacity: 0.8;
            text-align: center;
            margin-top: 5px;
        }
        .stop-btn {
            background-color: #F44336;
            color: white;
            height: 80px;
        }
        .stop-btn:hover, .stop-btn:active {
            background-color: #D32F2F;
        }
        #status-container {
            display: flex;
            flex-direction: column;
            gap: 10px;
            margin: 20px 0;
        }
        
        #status, #tv-mode-status {
            padding: 10px;
            border-radius: 4px;
            color: white;
            font-weight: bold;
        }
        
        #tv-mode-status {
            background-color: #757575;
        }
        .loading {
            display: none;
            text-align: center;
            margin: 20px 0;
        }
        .spinner {
            border: 4px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top: 4px solid #fff;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        .notification {
            position: fixed;
            top: 20px;
            left: 50%;
            transform: translateX(-50%);
            padding: 15px 20px;
            border-radius: 5px;
            color: white;
            font-weight: bold;
            opacity: 0;
            transition: opacity 0.3s;
            z-index: 100;
        }
        .success {
            background-color: #4CAF50;
        }
        .error {
            background-color: #F44336;
        }

        /* Sleep Timer Modal Styles */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0,0,0,0.5);
        }
        .modal-content {
            background-color: #333;
            margin: 10% auto;
            padding: 20px;
            border-radius: 8px;
            width: 90%;
            max-width: 450px;
            color: white;
        }
        .modal-title {
            font-size: 24px;
            margin-bottom: 20px;
            text-align: center;
        }
        .sleep-timer-options {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(70px, 1fr));
            gap: 12px;
            margin: 20px 0;
        }
        .sleep-timer-btn {
            background-color: #2196F3;
            color: white;
            border: none;
            padding: 12px 8px;
            border-radius: 8px;
            cursor: pointer;
            font-size: 13px;
            transition: all 0.3s;
        }
        .sleep-timer-btn:hover {
            background-color: #1976D2;
        }
        .sleep-timer-btn.selected {
            background-color: #4CAF50;
        }
        .sleep-timer-btn.no-timer {
            background-color: #757575;
        }
        .sleep-timer-btn.no-timer:hover {
            background-color: #616161;
        }
        .sleep-timer-btn.no-timer.selected {
            background-color: #FF9800;
        }
        .modal-buttons {
            display: flex;
            gap: 15px;
            margin-top: 20px;
        }
        .modal-btn {
            flex: 1;
            padding: 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            transition: all 0.3s;
        }
        .modal-btn.primary {
            background-color: #4CAF50;
            color: white;
        }
        .modal-btn.primary:hover {
            background-color: #388E3C;
        }
        .modal-btn.secondary {
            background-color: #666;
            color: white;
        }
        .modal-btn.secondary:hover {
            background-color: #555;
        }
        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            line-height: 20px;
        }
        .close:hover {
            color: white;
        }
        .sleep-timer-controls {
            display: none;
            background-color: #2c2c2c;
            padding: 15px;
            border-radius: 8px;
            margin: 15px 0;
        }
        .sleep-timer-info {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
            flex-wrap: wrap;
            gap: 10px;
        }
        .timer-display {
            font-size: 16px;
            font-weight: bold;
        }
        .timer-countdown {
            font-family: 'Courier New', monospace;
            font-size: 18px;
            color: #4CAF50;
        }
        .timer-buttons {
            display: flex;
            gap: 10px;
        }
        .timer-btn {
            background-color: #2196F3;
            color: white;
            border: none;
            padding: 8px 12px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 14px;
        }
        .timer-btn:hover {
            background-color: #1976D2;
        }
        .timer-btn.danger {
            background-color: #F44336;
        }
        .timer-btn.danger:hover {
            background-color: #D32F2F;
        }

        /* Make buttons extra big on small screens */
        @media (max-width: 600px) {
            .user-btn {
                min-height: 150px;
            }
            .user-name {
                font-size: 24px;
            }
            .shows-list {
                font-size: 14px;
            }
            .stop-btn {
                height: 100px;
                font-size: 24px;
            }
            .modal-content {
                margin: 5% auto;
                width: 95%;
            }
            .sleep-timer-info {
                flex-direction: column;
                align-items: stretch;
                text-align: center;
            }
            .timer-buttons {
                justify-content: center;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>TV Show Picker</h1>
        
        <div id="user-buttons" class="user-buttons">
            <!-- User buttons will be inserted here dynamically -->
        </div>
        
        <div id="status-container">
            <div id="status">Status: Loading...</div>
            <div id="tv-mode-status">TV Mode: Loading...</div>
            <div id="sleep-timer-controls" class="sleep-timer-controls">
                <div class="sleep-timer-info">
                    <div class="timer-display">
                        <div id="sleep-timer-text">Sleep Timer: --</div>
                        <div id="sleep-timer-countdown" class="timer-countdown">--:--:--</div>
                    </div>
                    <div class="timer-buttons">
                        <button id="change-timer-btn" class="timer-btn">Change</button>
                        <button id="disable-timer-btn" class="timer-btn danger">Disable</button>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="loading" id="loading">
            <div class="spinner"></div>
            <p>Processing...</p>
        </div>
        
        <div class="control-buttons">
            <button id="stop-btn" class="btn stop-btn">STOP PLAYBACK</button>
        </div>
    </div>
    
    <div id="notification" class="notification"></div>

    <!-- Sleep Timer Modal -->
    <div id="sleep-timer-modal" class="modal">
        <div class="modal-content">
            <span class="close" id="close-modal">&times;</span>
            <h2 class="modal-title">Set Sleep Timer</h2>
            <div class="sleep-timer-options">
                <button class="sleep-timer-btn no-timer" data-hours="0">No Timer</button>
                <button class="sleep-timer-btn" data-hours="1">1h</button>
                <button class="sleep-timer-btn selected" data-hours="2">2h</button>
                <button class="sleep-timer-btn" data-hours="4">4h</button>
                <button class="sleep-timer-btn" data-hours="8">8h</button>
                <button class="sleep-timer-btn" data-hours="12">12h</button>
            </div>
            <div class="modal-buttons">
                <button id="cancel-modal" class="modal-btn secondary">Cancel</button>
                <button id="confirm-modal" class="modal-btn primary">Start TV Mode</button>
            </div>
        </div>
    </div>

    <script>
        // Store show mappings and current user
        let showMappings = {};
        let currentUser = null;
        let selectedSleepHours = 2; // Default to 2 hours
        let countdownInterval = null;
        
        // Function to fetch show mappings
        async function loadShowMappings() {
            try {
                const response = await fetch('/api/users');
                const data = await response.json();
                showMappings = data.show_mappings;
                createUserButtons();
            } catch (error) {
                showNotification(`Failed to load show mappings: ${error.message}`, 'error');
            }
        }
        
        // Function to create user buttons from show mappings
        function createUserButtons() {
            const userButtonsContainer = document.getElementById('user-buttons');
            userButtonsContainer.innerHTML = '';
            
            Object.keys(showMappings).forEach(user => {
                const button = document.createElement('button');
                button.className = 'btn user-btn';
                button.addEventListener('click', () => showSleepTimerModal(user));
                
                // Create user name element
                const userName = document.createElement('div');
                userName.className = 'user-name';
                userName.textContent = user.charAt(0).toUpperCase() + user.slice(1);
                
                // Create shows list element
                const showsList = document.createElement('div');
                showsList.className = 'shows-list';
                showsList.textContent = showMappings[user].join(', ');
                
                button.appendChild(userName);
                button.appendChild(showsList);
                userButtonsContainer.appendChild(button);
            });
        }
        
        // Function to show sleep timer modal
        function showSleepTimerModal(user) {
            currentUser = user;
            document.getElementById('sleep-timer-modal').style.display = 'block';
            
            // Reset to default selection
            document.querySelectorAll('.sleep-timer-btn').forEach(btn => {
                btn.classList.remove('selected');
                if (btn.dataset.hours === '2') {
                    btn.classList.add('selected');
                }
            });
            selectedSleepHours = 2;
            
            // Reset modal to default state
            document.getElementById('confirm-modal').textContent = 'Start TV Mode';
        }
        
        // Function to hide sleep timer modal
        function hideSleepTimerModal() {
            document.getElementById('sleep-timer-modal').style.display = 'none';
            currentUser = null;
        }
        
        // Function to play a random show for a user with sleep timer
        async function playShowForUser(user, sleepHours) {
            showLoading(true);
            try {
                const response = await fetch(`/api/play/${user}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        sleep_timer_hours: sleepHours
                    })
                });
                const data = await response.json();
                
                if (response.ok) {
                    const timerText = sleepHours === 0 ? 'no timer' : `${sleepHours}h timer`;
                    showNotification(`Playing show for ${user} (${timerText})`, 'success');
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification(`Failed to play show: ${error.message}`, 'error');
            } finally {
                showLoading(false);
                updateStatus();
            }
        }
        
        // Function to update sleep timer
        async function updateSleepTimer(hours) {
            showLoading(true);
            try {
                const response = await fetch('/api/sleep-timer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        hours: hours
                    })
                });
                const data = await response.json();
                
                if (response.ok) {
                    showNotification(`Sleep timer updated to ${hours} hours`, 'success');
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification(`Failed to update sleep timer: ${error.message}`, 'error');
            } finally {
                showLoading(false);
                updateStatus();
            }
        }
        
        // Function to disable sleep timer
        async function disableSleepTimer() {
            showLoading(true);
            try {
                const response = await fetch('/api/sleep-timer', {
                    method: 'DELETE'
                });
                const data = await response.json();
                
                if (response.ok) {
                    showNotification('Sleep timer disabled', 'success');
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification(`Failed to disable sleep timer: ${error.message}`, 'error');
            } finally {
                showLoading(false);
                updateStatus();
            }
        }
        
        // Function to stop playback
        async function stopPlayback() {
            showLoading(true);
            try {
                const response = await fetch('/api/stop', {
                    method: 'POST'
                });
                const data = await response.json();
                
                if (response.ok) {
                    showNotification('Playback stopped', 'success');
                } else {
                    showNotification(data.message, 'error');
                }
            } catch (error) {
                showNotification(`Failed to stop playback: ${error.message}`, 'error');
            } finally {
                showLoading(false);
                updateStatus();
            }
        }
        
        // Function to format seconds as HH:MM:SS
        function formatTime(seconds) {
            const hours = Math.floor(seconds / 3600);
            const minutes = Math.floor((seconds % 3600) / 60);
            const secs = seconds % 60;
            
            return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`;
        }
        
        // Function to update countdown display
        function updateCountdown(remainingSeconds) {
            const countdownElement = document.getElementById('sleep-timer-countdown');
            if (remainingSeconds > 0) {
                countdownElement.textContent = formatTime(remainingSeconds);
                countdownElement.style.color = remainingSeconds < 300 ? '#FF9800' : '#4CAF50'; // Orange if < 5 min
            } else {
                countdownElement.textContent = '00:00:00';
                countdownElement.style.color = '#F44336'; // Red when expired
            }
        }
        
        // Function to start local countdown
        function startLocalCountdown(initialSeconds) {
            // Clear existing countdown
            if (countdownInterval) {
                clearInterval(countdownInterval);
            }
            
            let remainingSeconds = initialSeconds;
            
            countdownInterval = setInterval(() => {
                remainingSeconds--;
                updateCountdown(remainingSeconds);
                
                if (remainingSeconds <= 0) {
                    clearInterval(countdownInterval);
                    countdownInterval = null;
                    // Trigger a status update to reflect the change
                    setTimeout(updateStatus, 1000);
                }
            }, 1000);
        }
        
        // Function to update the status display
        async function updateStatus() {
            try {
                const response = await fetch('/api/status');
                const data = await response.json();
                
                const statusElement = document.getElementById('status');
                
                // Update main status message
                if (data.status === 'active') {
                    statusElement.textContent = 'Status: Media is currently playing';
                    statusElement.style.backgroundColor = '#4CAF50';
                } else if (data.status === 'inactive') {
                    statusElement.textContent = 'Status: No media is currently playing';
                    statusElement.style.backgroundColor = '#333';
                } else {
                    statusElement.textContent = `Status: ${data.message}`;
                    statusElement.style.backgroundColor = '#F44336';
                }
                
                // Add TV mode status information
                const tvModeElement = document.getElementById('tv-mode-status');
                const sleepTimerControls = document.getElementById('sleep-timer-controls');
                
                if (data.tv_mode) {
                    const tvActiveStatus = data.tv_mode.active ? 'Active' : 'Inactive';
                    let tvModeText = `TV Mode: ${tvActiveStatus}`;
                    
                    // Add user information if available
                    if (data.tv_mode.active && data.tv_mode.user) {
                        tvModeText += ` (User: ${data.tv_mode.user})`;
                    }
                    
                    tvModeElement.textContent = tvModeText;
                    tvModeElement.style.display = 'block';
                    
                    // Set visual indicator for TV mode status
                    if (data.tv_mode.active) {
                        tvModeElement.style.backgroundColor = '#2196F3'; // Blue for active TV mode
                        
                        // Show sleep timer controls if TV mode is active
                        if (data.tv_mode.sleep_timer && data.tv_mode.sleep_timer.enabled) {
                            sleepTimerControls.style.display = 'block';
                            
                            // Update sleep timer display
                            const sleepTimerText = document.getElementById('sleep-timer-text');
                            sleepTimerText.textContent = `Sleep Timer: ${data.tv_mode.sleep_timer.duration_hours}h`;
                            
                            // Update countdown with remaining time and start local countdown
                            if (data.tv_mode.sleep_timer.remaining_seconds !== undefined) {
                                updateCountdown(data.tv_mode.sleep_timer.remaining_seconds);
                                startLocalCountdown(data.tv_mode.sleep_timer.remaining_seconds);
                            }
                        } else {
                            sleepTimerControls.style.display = 'none';
                            // Clear any running countdown
                            if (countdownInterval) {
                                clearInterval(countdownInterval);
                                countdownInterval = null;
                            }
                        }
                    } else {
                        tvModeElement.style.backgroundColor = '#757575'; // Gray for inactive TV mode
                        sleepTimerControls.style.display = 'none';
                        // Clear any running countdown
                        if (countdownInterval) {
                            clearInterval(countdownInterval);
                            countdownInterval = null;
                        }
                    }
                } else {
                    tvModeElement.style.display = 'none';
                    sleepTimerControls.style.display = 'none';
                    // Clear any running countdown
                    if (countdownInterval) {
                        clearInterval(countdownInterval);
                        countdownInterval = null;
                    }
                }
            } catch (error) {
                const statusElement = document.getElementById('status');
                statusElement.textContent = `Status: Error - ${error.message}`;
                statusElement.style.backgroundColor = '#F44336';
                
                // Hide TV mode element and sleep timer controls on error
                const tvModeElement = document.getElementById('tv-mode-status');
                const sleepTimerControls = document.getElementById('sleep-timer-controls');
                tvModeElement.style.display = 'none';
                sleepTimerControls.style.display = 'none';
                
                // Clear any running countdown
                if (countdownInterval) {
                    clearInterval(countdownInterval);
                    countdownInterval = null;
                }
            }
        }
        
        // Function to show/hide loading indicator
        function showLoading(show) {
            document.getElementById('loading').style.display = show ? 'block' : 'none';
        }
        
        // Function to show notifications
        function showNotification(message, type) {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification ${type}`;
            notification.style.opacity = 1;
            
            setTimeout(() => {
                notification.style.opacity = 0;
            }, 3000);
        }
        
        // Setup event listeners
        document.getElementById('stop-btn').addEventListener('click', stopPlayback);
        
        // Modal event listeners
        document.getElementById('close-modal').addEventListener('click', hideSleepTimerModal);
        document.getElementById('cancel-modal').addEventListener('click', hideSleepTimerModal);
        
        // Sleep timer button selection
        document.querySelectorAll('.sleep-timer-btn').forEach(btn => {
            btn.addEventListener('click', (e) => {
                document.querySelectorAll('.sleep-timer-btn').forEach(b => b.classList.remove('selected'));
                e.target.classList.add('selected');
                selectedSleepHours = parseInt(e.target.dataset.hours);
            });
        });
        
        // Confirm modal button
        document.getElementById('confirm-modal').addEventListener('click', () => {
            if (currentUser !== null) {
                playShowForUser(currentUser, selectedSleepHours);
                hideSleepTimerModal();
            }
        });
        
        // Sleep timer control buttons
        document.getElementById('change-timer-btn').addEventListener('click', () => {
            // Show modal for changing timer
            showSleepTimerModal(null);
            document.getElementById('confirm-modal').textContent = 'Update Timer';
            
            // Override the confirm button behavior temporarily
            const originalOnClick = document.getElementById('confirm-modal').onclick;
            document.getElementById('confirm-modal').onclick = () => {
                if (selectedSleepHours === 0) {
                    disableSleepTimer();
                } else {
                    updateSleepTimer(selectedSleepHours);
                }
                hideSleepTimerModal();
                // Restore original behavior
                document.getElementById('confirm-modal').textContent = 'Start TV Mode';
                document.getElementById('confirm-modal').onclick = originalOnClick;
            };
        });
        
        document.getElementById('disable-timer-btn').addEventListener('click', disableSleepTimer);
        
        // Close modal when clicking outside
        window.addEventListener('click', (e) => {
            const modal = document.getElementById('sleep-timer-modal');
            if (e.target === modal) {
                hideSleepTimerModal();
            }
        });
        
        // Load initial data
        loadShowMappings();
        updateStatus();
        
        // Update status periodically (less frequently now that we have local countdown)
        setInterval(updateStatus, 30000); // Every 30 seconds instead of 5
    </script>
</body>
</html>
